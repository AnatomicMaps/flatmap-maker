#===============================================================================

import pandas as pd
import ast
import json
import logging
import os

#===============================================================================

class PathError(Exception):
    pass

#===============================================================================

def generate_aliase(aligned_file, connectivity_term_file):
    df_alias = pd.read_csv(aligned_file)
    df_alias = df_alias[df_alias['Selected'].str.len() > 0]
    
    node_aliases = []
    for idx in df_alias.index:
        alias = df_alias.loc[idx]
        try:
            if alias['Selected'] == '1':
                node_aliases += [{
                    'id': ast.literal_eval(alias['Align candidates']),
                    'name': alias['Candidate name'],
                    'aliases': [ast.literal_eval(alias['Node'])]
                }]
            elif len(alias['Selected']) > 1:
                node_aliases += [{
                    'id': ast.literal_eval(alias['Selected']),
                    'aliases': [ast.literal_eval(alias['Node'])]
                }]
        except:
            logging.error('Incorrect csv format')
    if os.path.exists(connectivity_term_file):
        with open(connectivity_term_file, 'r') as f:
            connectivity_terms = json.load(f)
    else:
        connectivity_terms = []
    connectivity_terms = connectivity_terms + node_aliases
    with open(connectivity_term_file, 'w') as f:
        json.dump(connectivity_terms, f, indent=4)

def main():
    import argparse
    import sys

    parser = argparse.ArgumentParser(description="Checking nodes and edges completeness in the generated flatmap")
    parser.add_argument('--aligned-file', dest='aligned_file', metavar='ALIGNED_FILE', help='Missing node alignment file that is already curated')
    parser.add_argument('--connectivity-terms-file', dest='connectivity_term_file', help='The connectivity terms file that will be merged with the aligned file')
    
    try:
        args = parser.parse_args()
        generate_aliase(args.aligned_file, args.connectivity_term_file)
    except PathError as error:
        sys.stderr.write(f'{error}\n')
        sys.exit(1)
    sys.exit(0)

#===============================================================================

if __name__ == '__main__':
    main()

#===============================================================================

# This script is used to merge the currated align missing node to the existing connectivity_terms.json
# Command:
# python ./npo_alias.py --aligned-file `the aligned file generated by npo_align.py and has been curated`
#                       --connectivity-terms-file `connectivity_terms file to merge`
